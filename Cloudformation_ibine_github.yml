

AWSTemplateFormatVersion: 2010-09-09
Description: VPC template pour la migration vers le cloud

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Configuration reseau

      Parameters:
      - VPCCIDR
      - PublicSubnet1CIDR
      - PublicSubnet2CIDR
      - PrivateSubnet1CIDR
      - Nameofkey

    ParameterLabels:
      VPCCIDR:
        default: VPC CIDR

      PublicSubnet1CIDR:
        default: Public subnet 1 CIDR

      PublicSubnet2CIDR:
        default: Public subnet 2 CIDR

      PrivateSubnet1CIDR:
        default: Private subnet 1 CIDR
      
      Nameofkey:
        Default: 'Nameofkey'

Parameters:

  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
    Default: 172.31.0.0/16
    Description: CIDR Block for the VPC
    Type: String

  PublicSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
    Default: 172.31.1.0/24
    Description: CIDR Block for the public DMZ subnet 1 located in Availability Zone 1
    Type: String

  PublicSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
    Default: 172.31.2.0/24
    Description: CIDR Block for the public DMZ subnet 2 located in Availability Zone 2
    Type: String

  PrivateSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
    Default: 172.31.0.0/24
    Description: CIDR block for private subnet 1 located in Availability Zone 1
    Type: String

  Nameofkey: 
    Description: Amazon EC2 Key Pair
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: must be a valid Key Pair
    Default: 'Nameofkey'
    Type: String


Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      Tags:
        - Key: Name
          Value: "vpc p10"


  IGW:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: "Internetgateway p10"

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref IGW
      VpcId: !Ref myVPC

  VPCPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: True
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: Project_10_Pub1
      VpcId: !Ref myVPC


  VPCPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: True
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: Project_10_Pub2
      VpcId: !Ref myVPC


  VPCPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: 
        Fn::Select: 
          - 2
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: Project_10_Priv1
      VpcId: !Ref myVPC


  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: ProjectXPubRT


  PublicDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable


  PublicRouteSubnetAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref VPCPublicSubnet1


  PublicRouteSubnetAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref VPCPublicSubnet2


  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: ProjectXPrivRT 


  OpenvpnRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "192.168.1.0/24"
      InstanceId: !Ref Vpn
      RouteTableId: !Ref PrivateRouteTable

  PrivateDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref IGW
      RouteTableId: !Ref PrivateRouteTable

  PrivateRouteSubnetAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref VPCPrivateSubnet1



##########################################
##                                      ##
##  Fin Creation de l'infrastreucture   ##
##                                      ##
##########################################
 

##########################################
##                                      ##
##  Debut Creation de security groupe   ##
##                                      ##
##########################################

#Creation du groupe de securite de l'intranet & VPN ok  
  EC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref myVPC
      GroupDescription: for the allow ssh, http 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '1194'
          ToPort: '1194'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: @IP Public
      Tags:
        - Key: Name
          Value: EC2SG


#Creation du groupe de securite de la launchconfig
  WebsiteEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Website EC2 security group 
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref myVPC

#Creation du groupe de securite de l'ELB
  WebsiteLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Website EC2 security group 
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref myVPC

########################################
##                                    ##
##  Fin Creation de security groupe   ##
##                                    ##
########################################


###################################
##                               ##
##  Debut Creation de services   ##
##                               ##
###################################

#Creation de la launchconfig
  WebsiteLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: MyDB
    DependsOn: WebsiteLoadBalancer
    Properties:
      AssociatePublicIpAddress: true
      ImageId: ami-096b8af6e7e8fb927
      InstanceType: t2.micro
      KeyName: cle
      SecurityGroups:
        - !Ref WebsiteEC2SecurityGroup
      UserData:
        Fn::Base64: !Sub | 
          #!/bin/bash
          sudo apt update -y
          sudo apt install vim stress php net-tools -y  
          sudo apt-get remove docker docker-engine docker.io  -y
          sudo apt install docker.io  -y
          sudo apt install docker-compose  -y
          sudo systemctl start docker  
          sudo groupadd docker
          sudo usermod -aG docker ubuntu 
          cd /home/ubuntu
          sudo cat <<end_compose>> /home/ubuntu/docker-compose.yml
          version: '3.1'
          services:
            wordpress:
              image: conetix/wordpress-with-wp-cli
              container_name: wordpress
              restart: always
              ports:
                - 8080:80
              environment:
                WORDPRESS_DB_HOST: ${MyDB.Endpoint.Address}
                WORDPRESS_DB_USER: 'wordpress'
                WORDPRESS_DB_PASSWORD: 'wordpress'
                WORDPRESS_DB_NAME: 'wordpress'
              volumes:
                - ./wordpress:/var/www/html

          volumes:
            wordpress:
          end_compose
          cd /home/ubuntu
          sudo cat <<end_wpcli>> /home/ubuntu/update-wordpress.sh
          #!/bin/bash
          echo "Debut installation de wordpress"
          wp core install --url=${WebsiteLoadBalancer.DNSName} --title=monsite --admin_user=wordpress --admin_password=wordpress --admin_email=123@example.fr
          echo "Installation de wordpress ok"
          echo " DÃ©but installation du plugin wp offload "
          wp --allow-root plugin install amazon-s3-and-cloudfront
          wp --allow-root plugin activate amazon-s3-and-cloudfront
          echo " Installation du plugin wp offload ok "
          echo " Fin du scipt update-wordpress.sh"          
          end_wpcli
          sudo cat <<end_wp-config.php>> /home/ubuntu/add-config-php.sh
          #!/bin/bash
          sudo echo "" >>/home/ubuntu/wordpress/wp-config.php
          sudo echo "" >>/home/ubuntu/wordpress/wp-config.php
          sudo echo "define( 'DBI_AWS_ACCESS_KEY_ID', ' XXXXXXXXXXXXXXXXXXXXXX' );" >>/home/ubuntu/wordpress/wp-config.php
          sudo echo "define( 'DBI_AWS_SECRET_ACCESS_KEY', 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' );" >>/home/ubuntu/wordpress/wp-config.php
          sudo echo "" >>/home/ubuntu/wordpress/wp-config.php
          sudo echo "" >>/home/ubuntu/wordpress/wp-config.php
          sudo echo "define( 'AS3CF_BUCKET','${BucketP10}' );" >>/home/ubuntu/wordpress/wp-config.php
          sudo echo "" >>/home/ubuntu/wordpress/wp-config.php
          sudo echo "" >>/home/ubuntu/wordpress/wp-config.php
          sudo echo "define('WP_HOME','http://${WebsiteLoadBalancer.DNSName}');" >>/home/ubuntu/wordpress/wp-config.php
          sudo echo "define('WP_SITEURL','http://${WebsiteLoadBalancer.DNSName}');" >>/home/ubuntu/wordpress/wp-config.php
          end_wp-config.php
          sudo docker-compose up -d
          sudo cp /home/ubuntu/update-wordpress.sh /home/ubuntu/wordpress/update-wordpress.sh
          
          container_id=$(sudo docker ps -aqf "name=wordpress")
          sudo docker exec $container_id chmod +x /var/www/html/update-wordpress.sh
          sudo docker exec $container_id /var/www/html/update-wordpress.sh
          sudo chmod +x /home/ubuntu/add-wp-config.php
          sudo bash /home/ubuntu/add-config-php.sh


  
#Creation de l'autoscaling groupe
  WebsiteScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref WebsiteLaunchConfig
      AvailabilityZones:
        - Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
        - Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      VPCZoneIdentifier: [!Ref VPCPublicSubnet1, !Ref VPCPublicSubnet2]
      DesiredCapacity: 2
      MaxSize: 4
      MinSize: 2
      TargetGroupARNs:
        - !Ref WebsiteTargetGroup
      

#Creation des target
  WebsiteTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref myVPC
  
#Creation du loadbalancer
  WebsiteLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref WebsiteLoadBalancerSecurityGroup
      Subnets: [!Ref VPCPublicSubnet1, !Ref VPCPublicSubnet2]
  
#Creation du listener  
  WebsiteLoadBlancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      LoadBalancerArn: !Ref WebsiteLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebsiteTargetGroup

#Creation du scale up
  AppScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebsiteScalingGroup
      Cooldown: '60'
      ScalingAdjustment: 1

#Creation du scale down 
  AppScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebsiteScalingGroup
      Cooldown: '300'
      ScalingAdjustment: -1

#Augmentation charge CPU
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 50% for 1 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 50
      AlarmActions: [!Ref AppScaleUpPolicy]
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref WebsiteScalingGroup
      ComparisonOperator: GreaterThanThreshold

#Diminution charge CPU
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 50% for 1 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 50
      AlarmActions: [!Ref AppScaleDownPolicy]
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref WebsiteScalingGroup
      ComparisonOperator: LessThanThreshold



#Creation du bucket ok
  BucketP10:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

#Creation de la BDD ok
  MyDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: "wordpress"
      Engine: MySQL
      MasterUsername: wordpress
      MasterUserPassword: wordpress
      DBInstanceClass: db.t2.micro
      AllocatedStorage: '5'
      AvailabilityZone: eu-west-3a
      

#Creation du replica BDD ok
  MyReadReplica:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5' 
      DBInstanceClass: db.t2.micro
      SourceDBInstanceIdentifier: !Ref MyDB
      SourceRegion: eu-west-3a
      AvailabilityZone: eu-west-3b

#################################
##                             ##
##  Debut Creation de service  ##
##                             ##
#################################

#Creation du vpn ok 
  Vpn:
    Type: AWS::EC2::Instance 
    Properties:
      ImageId: ami-096b8af6e7e8fb927    
      InstanceType: t2.micro
      KeyName: cle
      SourceDestCheck: "false"
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: "EC2SG"
          SubnetId: 
            Ref: "VPCPrivateSubnet1"
      BlockDeviceMappings:
        -
          DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 10
            VolumeType: gp2
      Tags:                    
        - Key: Name           
          Value: Vpn 
      
      UserData:
        Fn::Base64: !Sub |     
          #!/bin/bash
          sudo apt update -y
          sudo apt install vim net-tools traceroute openvpn smbclient -y
          sudo systemctl start openvpn
          cd /home/ubuntu
          sudo curl -O https://projet-10.s3.eu-west-3.amazonaws.com/script/ec2_vpn.ovpn
          sudo apt install openvpn -y
          sudo systemctl start openvpn  
          cd /etc/openvpn
          sudo mkdir ccd
          cd ccd
          sudo echo âiroute 172.31.0.0 255.255.255.0 â > ec2_vpn
          sudo echo âroute 172.31.0.0 255.255.255.0 â >> ec2_vpn  
          sudo sysctl -w net.ipv4.ip_forward=1      
          sudo openvpn /home/ubuntu/ec2_vpn.ovpn 
          
  Intranet:
    Type: AWS::EC2::Instance 
    Properties:
      ImageId: ami-096b8af6e7e8fb927    
      InstanceType: t2.micro
      KeyName: cle
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: "EC2SG"
          SubnetId: 
            Ref: "VPCPrivateSubnet1"
      BlockDeviceMappings:
        -
          DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 10
            VolumeType: gp2

      Tags:                    
      - Key: Name
        Value:  Intranet 
      UserData:
        Fn::Base64: !Sub |     
          #!/bin/bash
          sudo apt update -y
          sudo apt install vim traceroute net-tools apache2 smbclient -y 
          sudo systemctl start apache2
          sudo sysctl -w net.ipv4.ip_forward=1
          sudo echo "<html><body><h1> Hello world from ${AWS::Region}<h1><body><html>" > /var/www/html/index.html
          sudo echo "${Vpn.PrivateIp}" > /home/ubuntu/ippriv
          sudo ip route add 10.8.0.0/24 via ${Vpn.PrivateIp}

Outputs:
  RDSEndpoint:
    Description: RDS Endpoint
    Value: !GetAtt MyDB.Endpoint.Address
  ELBEndpoint:
    Description: WebsiteLoadBalancer Endpoint
    Value: !GetAtt WebsiteLoadBalancer.DNSName
  VpnIpPriv:
    Description: IP priv vpn
    Value: !GetAtt Vpn.PrivateIp